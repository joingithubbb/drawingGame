{"version":3,"sources":["helpers.js","App.js","serviceWorker.js","index.js"],"names":["getPrediction","theCanvas","model","canvas","tensor","current","tf","resizeNearestNeighbor","mean","expandDims","toFloat","div","then","loadedModel","predict","data","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","prediction","wrap","_context","prev","next","abrupt","sent","stop","this","_x","apply","arguments","Canvas","React","forwardRef","props","ref","lastX","lastY","mouseDown","useEffect","context","getContext","fillStyle","fillRect","height","width","react_default","createElement","onMouseDown","onMouseUp","undefined","onMouseMove","e","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","_drawLine","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","_drawLine2","slicedToArray","handleMousemove","Boolean","window","location","hostname","match","labels","require","createRef","ReactDOM","render","_useState","useState","_useState2","setPrediction","console","log","onClick","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e5b122a.chunk.js","sourcesContent":["import * as tf from \"@tensorflow/tfjs\";\n\nfunction preprocessCanvas(canvas) {\n  // Preprocess image for the network\n  let tensor = tf\n    .fromPixels(canvas) // Shape: (300, 300, 3) - RGB image\n    .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\n    .mean(2) // Shape: (28, 28) - grayscale\n    .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\n    .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\n    .toFloat(); // Network works with floating points inputs\n  return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\n}\n\nexport function getPrediction(theCanvas, model) {\n  const tensor = preprocessCanvas(theCanvas.current);\n  return model\n    .then(loadedModel => loadedModel.predict(tensor).data())\n    .then(async prediction => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\n}\n","import React, { useEffect, useState } from \"react\";\nimport { getPrediction } from \"./helpers.js\";\n\nfunction Controls({ theCanvas, model, labels }) {\n  let [prediction, setPrediction] = useState(\"\"); // Sets default label to empty string.\n\n  useEffect(() => {\n    console.log(prediction);\n  });\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          const canvas = theCanvas.current;\n          const ctx = canvas.getContext(\"2d\");\n          ctx.fillRect(0, 0, canvas.height, canvas.width);\n        }}\n      >\n        Clear the canvas.\n      </button>\n      <button\n        onClick={() =>\n          getPrediction(theCanvas, model).then(prediction =>\n            setPrediction(labels[prediction[0]])\n          )\n        }\n      >\n        Predict the drawing.\n      </button>\n    </div>\n  );\n}\n\nconst Canvas = React.forwardRef((props, ref) => {\n  let mouseDown = false;\n  let lastX;\n  let lastY;\n\n  function drawLine(canvas, x, y, lastX, lastY) {\n    let context = canvas.getContext(\"2d\");\n\n    context.strokeStyle = \"#000000\";\n    context.lineWidth = 12;\n    context.lineJoin = \"round\";\n\n    context.beginPath();\n    context.moveTo(lastX, lastY);\n    context.lineTo(x, y);\n    context.closePath();\n    context.stroke();\n\n    return [x, y];\n  }\n\n  const handleMouseup = () => {\n    mouseDown = false;\n    [lastX, lastY] = [undefined, undefined];\n  };\n\n  const handleMousemove = e => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    if (mouseDown) {\n      [lastX, lastY] = drawLine(e.target, x, y, lastX, lastY);\n    }\n  };\n\n  useEffect(() => {\n    const canvas = ref.current;\n    const context = canvas.getContext(\"2d\");\n\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(0, 0, canvas.height, canvas.width);\n  });\n\n  return (\n    <canvas\n      height={300}\n      width={300}\n      ref={ref}\n      onMouseDown={() => (mouseDown = true)}\n      onMouseUp={handleMouseup}\n      onMouseMove={e => handleMousemove(e)}\n    />\n  );\n});\n\nexport { Canvas, Controls };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Canvas, Controls } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nconst model = tf.loadModel(\"./model/model.json\");\nconst labels = require(\"./labels.json\");\nlet ref = React.createRef();\n\nReactDOM.render(\n  <div>\n    <Canvas ref={ref} />\n    <Controls theCanvas={ref} model={model} labels={labels} />\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}